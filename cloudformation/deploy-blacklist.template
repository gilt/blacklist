{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "StopWords": {
      "Type": "String",
      "Description": "A regular expression that is used to match the message as a 'stop' message."
    },
    "StageWhitelist": {
      "Type": "String",
      "Description": "A comma-delimited list (no spaces) of phone numbers to whitelist in the stage environment."
    }
  },
  "Resources": {
    "DB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "Type",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "Type",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "StageDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "Type",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "Type",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "stage"
            ]
          ]
        }
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogWriter",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "DBWriter",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:dynamodb:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":table/",
                          {
                            "Ref": "DB"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:dynamodb:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":table/",
                          {
                            "Ref": "DB"
                          },
                          "-stage"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "DB"
      ]
    },
    "Api": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "Description": {
          "Fn::Join": [
            " ",
            [
              "API endpoints for",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "MoMessageResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "Api",
            "RootResourceId"
          ]
        },
        "PathPart": "mo_message",
        "RestApiId": {
          "Ref": "Api"
        }
      },
      "DependsOn": [
        "Api"
      ]
    },
    "MoMessagePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": {
          "Ref": "MoMessageResource"
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":function:",
                {
                  "Ref": "MoMessageFunction"
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "Api",
        "MoMessageFunction",
        "MoMessageResource"
      ]
    },
    "NotificationTypeResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "Api",
            "RootResourceId"
          ]
        },
        "PathPart": "{notification_type}",
        "RestApiId": {
          "Ref": "Api"
        }
      },
      "DependsOn": [
        "Api"
      ]
    },
    "BlacklistResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "NotificationTypeResource"
        },
        "PathPart": "{blacklist_id}",
        "RestApiId": {
          "Ref": "Api"
        }
      },
      "DependsOn": [
        "NotificationTypeResource"
      ]
    },
    "BlacklistDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": {
          "Ref": "BlacklistResource"
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "HttpMethod": "DELETE",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":function:",
                {
                  "Ref": "DeleteFunction"
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "Api",
        "DeleteFunction",
        "BlacklistResource"
      ]
    },
    "BlacklistGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": {
          "Ref": "BlacklistResource"
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":function:",
                {
                  "Ref": "GetFunction"
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "Api",
        "GetFunction",
        "BlacklistResource"
      ]
    },
    "BlacklistPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": {
          "Ref": "BlacklistResource"
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":function:",
                {
                  "Ref": "PutFunction"
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "Api",
        "PutFunction",
        "BlacklistResource"
      ]
    },
    "Deployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "Api"
        }
      },
      "DependsOn": [
        "BlacklistDelete",
        "BlacklistGet",
        "BlacklistPut",
        "MoMessagePost"
      ]
    },
    "ProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "Deployment"
        },
        "Description": {
          "Fn::Join": [
            " ",
            [
              "Production version of the",
              {
                "Ref": "AWS::StackName"
              },
              "API"
            ]
          ]
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "StageName": "prod",
        "Variables": {
          "TABLE_NAME": {
            "Ref": "DB"
          }
        }
      },
      "DependsOn": [
        "Api",
        "DB",
        "Deployment"
      ]
    },
    "StageStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "Deployment"
        },
        "Description": {
          "Fn::Join": [
            " ",
            [
              "Production version of the",
              {
                "Ref": "AWS::StackName"
              },
              "API"
            ]
          ]
        },
        "RestApiId": {
          "Ref": "Api"
        },
        "StageName": "stage",
        "Variables": {
          "TABLE_NAME": {
            "Ref": "StageDB"
          },
          "WHITELIST": {
            "Ref": "StageWhitelist"
          }
        }
      },
      "DependsOn": [
        "Api",
        "StageDB",
        "Deployment"
      ]
    },
    "DeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk'),",
                "      dynamo = new AWS.DynamoDB();",
                "",
                "exports.handler = (event, context, callback) => {",
                "  console.info(toMessageString(event));",
                "  const blacklistId = sanitizeNumber(event.pathParameters.blacklist_id);",
                "  withSupportedType(event, context, callback, function(notificationType) {",
                "    dynamo.updateItem({",
                "      TableName: event.stageVariables.TABLE_NAME,",
                "      Key: { Id: { S: blacklistId }, Type: { S: notificationType } },",
                "      ExpressionAttributeNames: { '#l': 'Log' },",
                "      ExpressionAttributeValues: {",
                "        ':d': { S: (new Date()).toISOString() },",
                "        ':m': { SS: [ toMessageString(event) ] }",
                "      },",
                "      UpdateExpression: 'SET DeletedAt=:d, UpdatedAt=:d ADD #l :m'",
                "    }, function(err, data) {",
                "      if (err) return callback(err);",
                "      callback(null, { statusCode: 200, body: JSON.stringify({ id: blacklistId }) });",
                "    })",
                "  });",
                "}",
                "",
                "function withSupportedType(event, context, lambdaCallback, callback) {",
                "  const supportedTypes = ['sms'];",
                "  if (supportedTypes.indexOf(event.pathParameters.notification_type.toLowerCase()) >= 0) {",
                "    callback(event.pathParameters.notification_type.toLowerCase());",
                "  } else {",
                "    lambdaCallback(null, { statusCode: 400, body: JSON.stringify({ message: 'Notification type [' + event.pathParameters.notification_type + '] not supported.' }) });",
                "  }",
                "}",
                "",
                "function sanitizeNumber(raw) {",
                "  var numbers = raw.replace(/[^\\d]+/g, '');",
                "  if (numbers.match(/^1\\d{10}$/)) numbers = numbers.substring(1, 11);",
                "  return numbers;",
                "}",
                "",
                "function toMessageString(event) {",
                "  return JSON.stringify({",
                "    httpMethod: event.httpMethod,",
                "    pathParameters: event.pathParameters",
                "  })",
                "}",
                ""
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {}
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      },
      "DependsOn": [
        "LambdaRole"
      ]
    },
    "DeleteFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "Api"
              },
              "/*/*/*"
            ]
          ]
        }
      },
      "DependsOn": [
        "DeleteFunction",
        "Api"
      ]
    },
    "GetFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk'),",
                "      dynamo = new AWS.DynamoDB();",
                "",
                "exports.handler = (event, context, callback) => {",
                "  console.info(toMessageString(event));",
                "  const blacklistId = sanitizeNumber(event.pathParameters.blacklist_id);",
                "  withSupportedType(event, context, callback, function(notificationType) {",
                "    dynamo.getItem({",
                "      TableName: event.stageVariables.TABLE_NAME,",
                "      Key: { Id: { S: blacklistId }, Type: { S: notificationType } }",
                "    }, function(err, data) {",
                "      if (err) return callback(err);",
                "      if ((data && data.Item && afterNow(data, \"DeletedAt\")) || !onWhitelist(blacklistId, event.stageVariables.WHITELIST)) {",
                "        callback(null, { statusCode: 200, body: JSON.stringify({ id: blacklistId }) });",
                "      } else {",
                "        callback(null, { statusCode: 404, body: JSON.stringify({ message: \"Entry not blacklisted\" }) });",
                "      }",
                "    })",
                "  });",
                "}",
                "",
                "function afterNow(data, propertyName) {",
                "  if (data && data.Item && data.Item[propertyName] && data.Item[propertyName].S) {",
                "    return Date.parse(data.Item[propertyName].S) >= new Date();",
                "  } else {",
                "    return true;",
                "  }",
                "}",
                "",
                "// Set the whitelist in staging to only allow certain entries.",
                "function onWhitelist(blacklistId, whitelist) {",
                "  if (whitelist && whitelist.trim() != '') {",
                "    const whitelisted = whitelist.split(',');",
                "    return whitelisted.findIndex(function(item) { return blacklistId == item.trim(); }) >= 0;",
                "  } else {",
                "    return true;",
                "  }",
                "}",
                "",
                "function withSupportedType(event, context, lambdaCallback, callback) {",
                "  const supportedTypes = ['sms'];",
                "  if (supportedTypes.indexOf(event.pathParameters.notification_type.toLowerCase()) >= 0) {",
                "    callback(event.pathParameters.notification_type.toLowerCase());",
                "  } else {",
                "    lambdaCallback(null, { statusCode: 400, body: JSON.stringify({ message: 'Notification type [' + event.pathParameters.notification_type + '] not supported.' }) });",
                "  }",
                "}",
                "",
                "function sanitizeNumber(raw) {",
                "  var numbers = raw.replace(/[^\\d]+/g, '');",
                "  if (numbers.match(/^1\\d{10}$/)) numbers = numbers.substring(1, 11);",
                "  return numbers;",
                "}",
                "",
                "function toMessageString(event) {",
                "  return JSON.stringify({",
                "    httpMethod: event.httpMethod,",
                "    pathParameters: event.pathParameters",
                "  })",
                "}",
                ""
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {}
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      },
      "DependsOn": [
        "LambdaRole"
      ]
    },
    "GetFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "Api"
              },
              "/*/*/*"
            ]
          ]
        }
      },
      "DependsOn": [
        "GetFunction",
        "Api"
      ]
    },
    "MoMessageFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk'),",
                "      dynamo = new AWS.DynamoDB();",
                "",
                "exports.handler = (event, context, callback) => {",
                "  const moMessageXml = event.body;",
                "  console.info(moMessageXml);",
                "  if (messageMatch = moMessageXml.match(/<message>(.*)<\\/message>/)) {",
                "    if (messageMatch[1].toLowerCase().match(process.env.STOP_WORDS)) { // STOP_WORDS should be a Regex",
                "      if (originNumberMatch = moMessageXml.match(/<\\s*source\\s+.*?address\\s*=\\s*[\"'](.*?)[\"']/)) {",
                "        var originNumber = sanitizeNumber(originNumberMatch[1]);",
                "        dynamo.updateItem({",
                "          TableName: event.stageVariables.TABLE_NAME,",
                "          Key: { Id: { S: originNumber }, Type: { S: 'sms' } },",
                "          ExpressionAttributeNames: { '#l': 'Log' },",
                "          ExpressionAttributeValues: {",
                "            ':d': { S: (new Date()).toISOString() },",
                "            ':m': { SS: [ moMessageXml ] }",
                "          },",
                "          UpdateExpression: 'SET UpdatedAt=:d ADD #l :m REMOVE DeletedAt'",
                "        }, function(err, data) {",
                "          if (err) return callback(err);",
                "          callback(null, { statusCode: 200, body: JSON.stringify({ id: originNumber }) });",
                "        });",
                "      } else {",
                "        callback(null, { statusCode: 400, body: JSON.stringify({ message: 'Missing source address' }) });",
                "      }",
                "    } else {",
                "      callback(null, { statusCode: 200, body: JSON.stringify({ id: '' }) });",
                "    }",
                "  } else {",
                "    callback(null, { statusCode: 400, body: JSON.stringify({ message: 'Invalid message xml' }) });",
                "  }",
                "}",
                "",
                "function sanitizeNumber(raw) {",
                "  var numbers = raw.replace(/[^\\d]+/g, '');",
                "  if (numbers.match(/^1\\d{10}$/)) numbers = numbers.substring(1, 11);",
                "  return numbers;",
                "}",
                ""
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {
            "STOP_WORDS": {
              "Ref": "StopWords"
            }
          }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      },
      "DependsOn": [
        "LambdaRole"
      ]
    },
    "MoMessageFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MoMessageFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "Api"
              },
              "/*/*/*"
            ]
          ]
        }
      },
      "DependsOn": [
        "MoMessageFunction",
        "Api"
      ]
    },
    "PutFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const AWS = require('aws-sdk'),",
                "      dynamo = new AWS.DynamoDB();",
                "",
                "exports.handler = (event, context, callback) => {",
                "  console.info(toMessageString(event));",
                "  const blacklistId = sanitizeNumber(event.pathParameters.blacklist_id);",
                "  withSupportedType(event, context, callback, function(notificationType) {",
                "    dynamo.updateItem({",
                "      TableName: event.stageVariables.TABLE_NAME,",
                "      Key: { Id: { S: blacklistId }, Type: { S: notificationType } },",
                "      ExpressionAttributeNames: { '#l': 'Log' },",
                "      ExpressionAttributeValues: {",
                "        ':d': { S: (new Date()).toISOString() },",
                "        ':m': { SS: [ toMessageString(event) ] }",
                "      },",
                "      UpdateExpression: 'SET UpdatedAt=:d ADD #l :m REMOVE DeletedAt'",
                "    }, function(err, data) {",
                "      if (err) return callback(err);",
                "      callback(null, { statusCode: 200, body: JSON.stringify({ id: blacklistId }) });",
                "    })",
                "  });",
                "}",
                "",
                "function withSupportedType(event, context, lambdaCallback, callback) {",
                "  const supportedTypes = ['sms'];",
                "  if (supportedTypes.indexOf(event.pathParameters.notification_type.toLowerCase()) >= 0) {",
                "    callback(event.pathParameters.notification_type.toLowerCase());",
                "  } else {",
                "    lambdaCallback(null, { statusCode: 400, body: JSON.stringify({ message: 'Notification type [' + event.pathParameters.notification_type + '] not supported.' }) });",
                "  }",
                "}",
                "",
                "function sanitizeNumber(raw) {",
                "  var numbers = raw.replace(/[^\\d]+/g, '');",
                "  if (numbers.match(/^1\\d{10}$/)) numbers = numbers.substring(1, 11);",
                "  return numbers;",
                "}",
                "",
                "function toMessageString(event) {",
                "  return JSON.stringify({",
                "    httpMethod: event.httpMethod,",
                "    pathParameters: event.pathParameters",
                "  })",
                "}",
                ""
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {}
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      },
      "DependsOn": [
        "LambdaRole"
      ]
    },
    "PutFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PutFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "Api"
              },
              "/*/*/*"
            ]
          ]
        }
      },
      "DependsOn": [
        "PutFunction",
        "Api"
      ]
    }
  },
  "Outputs": {}
}